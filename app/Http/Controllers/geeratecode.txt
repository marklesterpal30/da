// Mail::to($address_from)->send(new AcceptMail('Your Document is Now Recieved By ATI'));

  // function generateDocumentCode($category) {
        //     // Define prefix and increment format based on category
        //     $prefix = '';
        //     $incrementFormat = '';
            
        //     switch ($category) {
        //         case 'ATI SPECIAL ORDER':
        //             $prefix = 'AS';
        //             $incrementFormat = '3';
        //             break;
        //         case 'LETTER':
        //             $prefix = 'L';
        //             $incrementFormat = '2';
        //             break;
        //         case 'ATI MEMORANDUM ORDER':
        //             $prefix = 'AM';
        //             $incrementFormat = '3';
        //             break;
        //         case 'DA SPECIAL ORDER':
        //             $prefix = 'DS';
        //             $incrementFormat = '3';
        //             break;
        //         case 'DA MEMORANDUM ORDER':
        //             $prefix = 'DM';
        //             $incrementFormat = '3';
        //             break;
        //         case 'OTHERS':
        //             $prefix = 'O';
        //             $incrementFormat = '3';
        //             break;
        //         // Add more cases for other categories if needed
        //         default:
        //             // Default to AS prefix and 3-digit increment format
        //             $prefix = 'AS';
        //             $incrementFormat = '3';
        //             break;
        //     }
            
           
        //         // Get the count of existing documents with the same category
        //         $count = DB::table('documents')
        //         ->where('category', $category)
        //         ->whereNotNull('recieved_date')
        //         ->count();

        //     // Generate the code based on the count
        //     $code = $prefix . '_' . str_pad($count + 1, $incrementFormat, '0', STR_PAD_LEFT);
        
        //     return $code;
        // }

        // function outgoignGenerateDocumentCode($category)
        // {
        //     $year = Carbon::now()->format('y'); // Get the last two digits of the current year
        //     $month = Carbon::now()->format('m'); // Get the current month
    
        //     // Fetch the latest document code for the given category from the database
        //     $lastDocument = Document::where('category', $category)
        //                             ->latest('code')
        //                             ->first();
    
        //     $lastCode = $lastDocument ? $lastDocument->code : null;
    
        //     switch ($category) {
        //         case 'TRAVEL ORDER':
        //             $lastNumber = $lastCode ? (int) substr($lastCode, 3) : 0;
        //             $newNumber = str_pad($lastNumber + 1, 4, '0', STR_PAD_LEFT);
        //             $newCode = "{$year}-{$newNumber}";
        //             break;

        //         case 'CONTRACT':
        //             $lastNumber = $lastCode ? (int) substr($lastCode, 3) : 0;
        //             $newNumber = str_pad($lastNumber + 1, 4, '0', STR_PAD_LEFT);
        //             $newCode = "{$year}-{$newNumber}";
        //             break;
    
        //         case 'OB':
        //             $lastNumber = $lastCode ? (int) substr($lastCode, 6) : 0;
        //             $newNumber = str_pad($lastNumber + 1, 4, '0', STR_PAD_LEFT);
        //             $newCode = "{$year}-{$month}-{$newNumber}";
        //             break;

        //         case 'LETTER':
        //             $lastNumber = $lastCode ? (int) substr($lastCode, 6) : 0;
        //             $newNumber = str_pad($lastNumber + 1, 4, '0', STR_PAD_LEFT);
        //             $newCode = "{$year}-{$month}-{$newNumber}";
        //             break;

        //         case 'TRAINIGN DESIGN':
        //             $lastNumber = $lastCode ? (int) substr($lastCode, 6) : 0;
        //             $newNumber = str_pad($lastNumber + 1, 4, '0', STR_PAD_LEFT);
        //             $newCode = "{$year}-{$month}-{$newNumber}";
        //             break;

        //         case 'OFFICE ORDER':
        //             $lastNumber = $lastCode ? (int) $lastCode : 0;
        //             $newNumber = str_pad($lastNumber + 1, 3, '0', STR_PAD_LEFT);
        //             $newCode = "{$newNumber}";
        //             break;
    
        //         default:
        //             return response()->json(['error' => 'Invalid category'], 400);
        //     }
    
        //     // Create a new document with the generated code
         
    
        //     return $newCode;
        // }

        // $category = $file->category;

        // if($file->type == 'incoming'){
        //     $documentCode = generateDocumentCode($category); 
        // }
        // else{
        //     $documentCode = outgoignGenerateDocumentCode($category);
        // }
        